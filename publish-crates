#!/usr/bin/env bash

## A script for publishing workspace crates to a target crates.io instance.
## You'll need to set up some environment variables in advance (see `main`).

echo "
publish-crates
========================

This script publishes all workspace crates to the target crates.io instance of
choice. It can either publish them to a local crates.io instance (which is set
up by this script) or the official crates.io registry.

This script is intended to be used from GitLab CI. Consider running subpub
directly if you're interested in running it somewhere else.
"

set -Eeu -o pipefail
shopt -s inherit_errexit

root="$PWD"
tmp="$root/.tmp"
cratesio_repo="$tmp/crates.io"
tmp_cargo_root="$tmp/cargo"
yj="$tmp/yj"
published_crates_log="$tmp/published-crates"

# https://doc.rust-lang.org/cargo/reference/config.html#hierarchical-structure
system_cargo_config_dir=/.cargo

# shellcheck disable=SC2317 # flow analysis doesn't work properly for exit traps
on_exit() {
  local exit_code=$?

  # it's not necessary to clean up the temporary folder on CI because everything
  # is cleaned up automatically when the job runner exits
  if [ ! "${CI:-}" ]; then
    rm -rf "$tmp"
  fi

  pkill -P "$$" || :

  exit "$exit_code"
}
trap on_exit EXIT

die() {
  local exit_code=$?

  local kill_group
  if [ "${2:-}" ]; then
    case "$1" in
      all)
        kill_group="$(ps -o pgid= $$ | tr -d " ")"
      ;;
      "") ;;
      *)
        log "Invalid operation $1; ignoring"
      ;;
    esac
    shift
  fi

  if [ "${1:-}" ]; then
    >&2 echo "$1"
  fi

  if [ "${kill_group:-}" ]; then
    kill -- "-$kill_group"
  else
    pkill -P "$$" || :
  fi

  if [ "$exit_code" -ne 0 ]; then
    exit "$exit_code"
  else
    exit 1
  fi
}

setup_local_cargo_config() {
  local initial_commit="$1"
  local mode="$2"

  case "$mode" in
    on)
      mkdir -p "$root/.cargo"

      # This configuration forces that packages are consumed solely from the
      # local registry. Without this cargo might consume packages from both the
      # local and the official registry, which can cause problems because cargo
      # consider crates hosted in different registries as different packages
      # even if they are identical, thus resulting in conflicts.
      config="
[registry]
default = \"local\"

[registries]

[registries.local]
index = \"$CARGO_REGISTRIES_LOCAL_INDEX\"
token = \"$CARGO_REGISTRIES_LOCAL_TOKEN\"

[source]

[source.local]
registry = \"$CARGO_SOURCE_LOCAL_REGISTRY\"

[source.crates-io]
replace-with = \"local\"
      "

      # Make `cargo` pick up the local registry configuration for builds which
      # happen within the context of $root
      echo "$config" >> "$root/.cargo/config.toml"

      # Make `cargo` also pick up the local registry configuration for builds
      # anywhere else. This is relevant because packages' checks and builds
      # might happen outside of $root, in which case cargo would not pick up the
      # $root/.cargo/config.toml and thus would resolve dependencies
      # incorrectly.
      # Example: https://gitlab.parity.io/parity/mirrors/polkadot/-/jobs/2299989#L3298
      sudo mkdir -p "$system_cargo_config_dir"
      echo "$config" | sudo tee "$system_cargo_config_dir/config.toml" >/dev/null
    ;;
    off)
      # clean up index.lock file in case some previous command has left the Git
      # tree in a bad state, otherwise `git checkout` will fail
      rm -f "$root/.git/index.lock"
      if ! git checkout "$initial_commit" "$root/.cargo/config.toml"; then
        rm "$root/.cargo/config.toml"
      fi
      sudo rm "$system_cargo_config_dir/config.toml"
    ;;
  esac
}

setup_local_cratesio() {
  local cratesio_local_crates="${1:-}"

  if [ ! "$cratesio_local_crates" ]; then
    load_workspace_crates
    cratesio_local_crates="${workspace_crates[*]}"
  fi

  git clone --branch releng https://github.com/paritytech/crates.io "$cratesio_repo"

  >/dev/null pushd "$cratesio_repo"

  mkdir local_uploads tmp

  local cratesio_token_prefix="--$$--"

  diesel migration run --locked-schema

  script/init-local-index.sh

  local pipe="$tmp/pipe"
  mkfifo "$pipe"

  # CARGO_REGISTRIES_LOCAL_INDEX needs to be exported before the
  # background-worker is launched since `cargo clean` relies on this variable
  export CARGO_REGISTRIES_LOCAL_INDEX=file://"$cratesio_repo"/tmp/index-bare

  export GIT_REPO_URL="file://$PWD/tmp/index-bare"
  export CARGO_SOURCE_LOCAL_REGISTRY="$GIT_REPO_URL"
  export GH_CLIENT_ID=
  export GH_CLIENT_SECRET=
  export WEB_ALLOWED_ORIGINS=http://localhost:8888,http://localhost:4200
  export SESSION_KEY=badkeyabcdefghijklmnopqrstuvwxyzabcdef
  export CRATESIO_TOKEN_PREFIX="$cratesio_token_prefix"
  export WEB_NEW_PKG_RATE_LIMIT_BURST=10248
  export CRATESIO_LOCAL_CRATES="$cratesio_local_crates"

  cargo run --quiet --bin server | while IFS= read -r line; do
    case "$line" in
      "$cratesio_token_prefix="*)
        echo "${line:$(( ${#cratesio_token_prefix} + 1 ))}" > "$pipe"
      ;;
      *)
        log "$line"
      ;;
    esac
  done || die all "Crates.io server failed" &

  log "Waiting for token from crates.io server..."
  local token
  token="$(cat "$pipe")"
  log "Got token from crates.io server: $token"

  local crate_committed_msg_prefix="Commit and push finished for \"Updating crate \`"
  export SPUB_CRATES_COMMITTED_FILE="$tmp/crates-committed"
  touch "$SPUB_CRATES_COMMITTED_FILE"

  # need set TMPDIR to disk because crates.io index is too big for tmpfs on RAM
  local old_tmpdir="${TMPDIR:-}"
  mkdir -p tmp/worker-tmp
  export TMPDIR="$PWD/tmp/worker-tmp"
  cargo run --quiet --bin background-worker | while IFS= read -r line; do
    log "$line"
    case "$line" in
      "Runner booted, running jobs")
        echo "$line" > "$pipe"
      ;;
      # example line: Commit and push finished for "Updating crate `foo#0.1.0`"
      "$crate_committed_msg_prefix"*)
        line_remainder="${line:${#crate_committed_msg_prefix}}"
        if [[ "$line_remainder" =~ ^([^#]+)#([[:digit:].]+) ]]; then
          crate="${BASH_REMATCH[1]}"
          crate_version="${BASH_REMATCH[2]}"

          # Clear the registry's cache after a crate is committed to the remote
          # registry to force its redownload
          cargo_home="${CARGO_HOME:-$HOME/.cargo}"
          find "$cargo_home" \
            -type d -path "**/$crate-$crate_version" \
            -print \
            -prune \
            -exec rm -rf {} \;
          find "$cargo_home" \
            -type f -path "**/$crate-$crate_version.crate" \
            -print \
            -exec rm -f {} \;

          # Clear the build cache to force the crate to be recompiled
          cargo clean --quiet \
            --manifest-path "$root/Cargo.toml" \
            -p "$crate" \
            || die all "Failed to clear build cache for crate $crate"

          echo "$crate=$crate_version" >> "$published_crates_log"
          echo "$crate" >> "$SPUB_CRATES_COMMITTED_FILE"
        else
          die all "background-worker line had unexpected format: $line"
        fi
      ;;
    esac
  done || die all "Crates.io background-worker failed" &
  if [ "$old_tmpdir" ]; then
    export TMPDIR="$old_tmpdir"
  else
    unset TMPDIR
    export -n TMPDIR
  fi
  unset old_tmpdir

  log "Waiting for the workers to be ready..."
  read -r < "$pipe"
  log "Workers are ready"

  >/dev/null popd

  export SPUB_CRATES_API=http://localhost:8888/api/v1
  export SPUB_REGISTRY=local
  export SPUB_REGISTRY_TOKEN="$token"
  export CARGO_REGISTRIES_LOCAL_TOKEN="$token"
}

setup_subpub() {
  if [ -e "$tmp_cargo_root/bin/subpub" ]; then
    return
  fi
  local branch="$1"
  cargo install --quiet \
    --git https://github.com/paritytech/subpub \
    --branch "$branch" \
    --root "$tmp_cargo_root"
  subpub --version
}

setup_diesel() {
  cargo install --quiet diesel_cli \
    --version 1.4.1 \
    --no-default-features \
    --features postgres \
    --root "$tmp_cargo_root"
  diesel --version
}

setup_postgres() {
  apt install -qq --assume-yes --no-install-recommends postgresql-13 libpq-dev sudo
  pg_ctlcluster 13 main start

  local db_user=pg
  local db_password=pg
  local db_name=crates_io
  export DATABASE_URL="postgres://$db_user:$db_password@localhost:5432/$db_name"

  log "Attempting to connect to the database @ $DATABASE_URL"
  local is_db_ready
  for ((i=0; i < 8; i++)); do
    if pg_isready -d "$DATABASE_URL"; then
      is_db_ready=true
      break
    else
      sleep 8
    fi
  done
  if [ ! "${is_db_ready:-}" ]; then
    die "Timed out on database connection"
  fi

  sudo -u postgres createuser -s -i -d -r -l -w "$db_user"
  sudo -u postgres createdb --owner "$db_user" "$db_name"
  sudo -u postgres psql -c "ALTER USER $db_user WITH ENCRYPTED PASSWORD '$db_password';"
}

load_workspace_crates() {
  local manifest_path="${1:-$root/Cargo.toml}"
  readarray -t workspace_crates < <(
    cargo tree --quiet --workspace --depth 0 --manifest-path "$manifest_path" |
    awk '{ if (length($1) == 0 || substr($1, 1, 1) == "[") { skip } else { print $1 } }' |
    sort |
    uniq
  )
  log "workspace crates: ${workspace_crates[*]}"
  if [ ${#workspace_crates[*]} -lt 1 ]; then
    die "No workspace crates detected for $root"
  fi
}

load_publishable_workspace_crates() {
  if [ "${publishable_workspace_crates:-}" ]; then
    return
  fi
  readarray -t publishable_workspace_crates < <(
    cargo metadata --quiet --format-version=1 --manifest-path "$root/Cargo.toml" |
    jq -r '
      . as $in |
      paths | select(
        (. | length == 3) and # .package, [N], .source
        .[0]=="packages" and
        .[2]=="source" and
        . as $path | $in | getpath($path)==null # .source == null for workspace crates
      ) as $crate_source_path |
      del($crate_source_path[-1]) as $crate_path |
      $in |
      if
        getpath($crate_path + ["publish"]) == null or
        getpath($crate_path + ["publish"]) == true
      then
        [getpath($crate_path + ["name"])]
      else
        []
      end
      | .[]
    '
  )
  if [ ${#publishable_workspace_crates[*]} -lt 1 ]; then
    die "No publishable workspace crates detected for the workspace of $root"
  fi
}

setup_yj() {
  if [ -e "$yj" ]; then
    return
  fi

  curl -sSLf -o "$yj" https://github.com/sclevine/yj/releases/download/v5.1.0/yj-linux-amd64

  local expected_checksum="8ce43e40fda9a28221dabc0d7228e2325d1e959cd770487240deb47e02660986  $yj"

  local actual_checksum
  actual_checksum="$(sha256sum "$yj")"

  if [ "$expected_checksum" != "$actual_checksum" ]; then
    die "File had invalid checksum: $yj
Expected: $expected_checksum
Actual: $actual_checksum"
  fi

  chmod +x "$yj"
}

check_cratesio_crate() {
  local crate="$1"
  local cratesio_api="$2"
  local expected_owner="$3"

  log "Checking if the crate $crate is compliant with crates.io"

  local owners_url="$cratesio_api/v1/crates/$crate/owners"

  local owners_response exit_code
  owners_response="$(curl -sSLf "$owners_url")" || exit_code=$?
  case "${exit_code:-$?}" in
    22) # 404 response, which means that the crate doesn't exist on crates.io
      >&2 log "Crate $crate does not yet exist on crates.io according to $owners_url. If this crate is NOT MEANT to be published, then add \`publish = false\` to its Cargo.toml. Otherwise, please follow the instructions of https://github.com/paritytech/releng-scripts#reserving-crates to reserve the crate."
      return 1
    ;;
    0) ;;
    *)
      >&2 log "Request to $owners_url failed with exit code $exit_code"
      return 1
    ;;
  esac

  local owners_logins
  owners_logins="$(echo -n "$owners_response" | jq -r '.users[] | .login')"

  local found_owner
  while IFS= read -r owner_login; do
    if [ "$owner_login" == "$expected_owner" ]; then
      found_owner=true
      break
    fi
  done < <(echo "$owners_logins")

  if [ ! "${found_owner:-}" ]; then
    >&2 log "crates.io ownership for crate $crate is not set up as expected.

The current owners were recognized from $owners_url:
$owners_logins

Failed to find $expected_owner among the above owners.

The current owners were extracted from the following response:
$owners_response
"
    return 1
  fi
}

check_repository() {
  local cratesio_api="$1"
  local cratesio_crates_owner="$2"
  local gh_api="$3"
  local this_ref="$4"
  local repo_owner="$5"
  local repo="$6"
  local check_for_crate_compliance="$7"
  local is_pr_branch="$8"

  local selected_crates=()

  # if the branch belongs to a pull request, then check only the changed files
  # changed within the pull request; otherwise, take all crates into account
  if [ "$is_pr_branch" ]; then
    local pr_number="$this_ref"

    changed_pr_files=()
    while IFS= read -r diff_line; do
      if ! [[ "$diff_line" =~ ^\+\+\+[[:space:]]+b/(.+)$ ]]; then
        continue
      fi
      local changed_file="${BASH_REMATCH[1]}"
      changed_pr_files+=("$changed_file")
      case "$changed_file" in
        */Cargo.toml)
          setup_yj

          local manifest_json
          manifest_json="$("$yj" -tj < "$changed_file")"

          local publish
          publish="$(echo -n "$manifest_json" | jq -r '.package.publish')"
          case "$publish" in
            null|true)
              local crate
              crate="$(echo -n "$manifest_json" | jq -e -r '.package.name')"
              selected_crates+=("$crate")
            ;;
            false) ;;
            *)
              die "Unexpected value for .package.publish of $changed_file: $publish"
            ;;
          esac
        ;;
      esac
    done < <(
      curl -sSLf \
        -H "Accept: application/vnd.github.v3.diff" \
        -H "Authorization: token $GITHUB_PR_TOKEN" \
        "$gh_api/repos/$repo_owner/$repo/pulls/$pr_number" \
      || die all "Failed to get diff for PR $pr_number"
    )
  else
    load_publishable_workspace_crates
    selected_crates=("${publishable_workspace_crates[@]}")
  fi

  if [ "$check_for_crate_compliance" ]; then
    local failed_crates=()

    for crate in "${selected_crates[@]}"; do
      if ! check_cratesio_crate \
        "$crate" \
        "$cratesio_api" \
        "$cratesio_crates_owner"
      then
        failed_crates+=("$crate")
      fi
    done

    if [ ${#failed_crates[*]} -gt 0 ]; then
      >&2 log "The following crates failed the crates.io compliance check: ${failed_crates[*]}"
      exit 1
    fi
  fi
}

setup_repository() {
  local this_file="${BASH_SOURCE[0]}"
  local this_file_dir="${this_file%/*}"
  local this_file_dirname="${this_file_dir##*/}"

  local ignores="/.tmp"$'\n'"/$this_file_dirname"
  if [ "${SPUB_TMP:-}" ]; then
    ignores+=$'\n'"/$SPUB_TMP"
  fi
  echo "$ignores" > "$tmp/.gitignore"

  git config core.excludesFile "$tmp/.gitignore"
}

setup_local_cratesio_target() {
  local cratesio_local_crates="${1:-}"

  apt update -qq
  setup_postgres
  # diesel setup should be after setup_progress because it depends on libpq
  setup_diesel
  setup_local_cratesio "$cratesio_local_crates"
}

main() {
  # Script-specific definitions
  local gh_api="https://api.github.com"
  local cratesio_api="https://crates.io/api"

  # Script-specific inputs
  # shellcheck disable=SC2153 # lowercase counterpart
  local cratesio_crates_owner="$CRATESIO_CRATES_OWNER"
  # shellcheck disable=SC2153 # lowercase counterpart
  local repo_owner="$REPO_OWNER"
  # shellcheck disable=SC2153 # lowercase counterpart
  local repo="$REPO"
  local spub_start_from="${SPUB_START_FROM:-}"
  local spub_publish_only="${SPUB_PUBLISH_ONLY:-}"
  local spub_verify_from="${SPUB_VERIFY_FROM:-}"
  local spub_exclude="${SPUB_EXCLUDE:-}"
  local spub_branch="${SPUB_BRANCH:-releng}"
  local spub_publish_all="${SPUB_PUBLISH_ALL:-}"
  local github_token="${GITHUB_TOKEN:-}"
  local cratesio_token="${CRATESIO_PUBLISH_TOKEN:-}"
  local only_check_pipeline="${ONLY_CHECK_PIPELINE:-}"
  local cratesio_target_instance="${CRATESIO_TARGET_INSTANCE:-}"
  local spub_stop_at_step="${SPUB_STOP_AT_STEP:-}"

  # Variables inherited from GitLab CI
  local this_ref="$CI_COMMIT_REF_NAME"
  local initial_commit_sha="$CI_COMMIT_SHA"
  # shellcheck disable=SC2153 # lowercase counterpart
  local ci_job_url="$CI_JOB_URL"
  local commit_message="$CI_COMMIT_MESSAGE"
  local ci_commit_tag="${CI_COMMIT_TAG:-}"

  local is_pr_branch
  if [[ "$this_ref" =~ ^[[:digit:]]+$ ]]; then
    is_pr_branch=true
  fi

  local is_tag_ref
  if [ "$ci_commit_tag" ]; then
    is_tag_ref=true
  fi

  if [ "$only_check_pipeline" ]; then
    # Use git ls-remote to query what's the latest commit for this ref upstream
    local remote_head_sha_cmd=(
      git
      ls-remote
      "https://github.com/$repo_owner/$repo"
      "$this_ref"
    )
    local remote_head_sha
    remote_head_sha="$("${remote_head_sha_cmd[@]}")"

    local expected_remote_head_sha="$initial_commit_sha"$'\t'
    if [ "${is_tag_ref:-}" ]; then
      expected_remote_head_sha+="refs/tags/$this_ref"
    else
      expected_remote_head_sha+="refs/heads/$this_ref"
    fi

    if [ "$remote_head_sha" != "$expected_remote_head_sha" ]; then
      die "Unexpected output for command: ${remote_head_sha_cmd[*]}

Expected: $expected_remote_head_sha

Actual: $remote_head_sha

Note: this pipeline should only be run for the latest commit of $this_ref!"
    fi

    exit 0
  fi

  git config --global user.name "CI"
  git config --global user.email "<>"
  rm -rf "$tmp"
  mkdir -p "$tmp"
  export PATH="$tmp:$PATH"
  mkdir -p "$tmp_cargo_root"
  export PATH="$tmp_cargo_root/bin:$PATH"

  if [[ $- =~ x ]]; then
    # when -x is set up the logged messages will be printed during execution, so there's no need to
    # also echo them; create a no-op executable for this purpose
    touch "$tmp/log"
    chmod +x "$tmp/log"
  else
    ln -s "$(which echo)" "$tmp/log"
  fi

  setup_repository

  local pr_commit_message_start="[CI] adjust workspace versions after publishing"

  local should_setup_local_cargo_config
  local publish_dependencies_locally
  local check_for_crate_compliance
  local check_commit_msg
  local prevent_target_setup
  case "$cratesio_target_instance" in
    local)
      check_for_crate_compliance=true

      case "$spub_stop_at_step" in
        validation)
          prevent_target_setup=true
        ;;
        "")
          should_setup_local_cargo_config=true
        ;;
        *)
          die "Invalid \$spub_stop_at_step: $spub_stop_at_step"
        ;;
      esac

      case "$repo" in
        substrate) ;;
        polkadot)
          if [ ! "${prevent_target_setup:-}" ]; then
            publish_dependencies_locally=true
          fi
        ;;
        *)
          die "Repository is not supported: $repo"
        ;;
      esac
    ;;
    default)
      # crate compliance is not checked for this target because we assume it has
      # already been checked previously, when this script ran for local target

      case "$repo" in
        substrate) ;;
        polkadot)
          # TODO: Go further when Polkadot crates can be published
          log "Publishing to crates.io is temporarily disabled for this repository"
          exit 0
        ;;
        *)
          die "Target $cratesio_target_instance is disabled for this repository"
        ;;
      esac

      check_commit_msg=true
    ;;
    *)
      die "Invalid \$cratesio_target_instance: $cratesio_target_instance"
    ;;
  esac

  if [ "${check_commit_msg:-}" ]; then
    # it's not necessary to publish to crates.io for commits of the
    # auto-generated PR since they should only contain version bumps for
    # workspace crates, which don't matter for publishing anyhow
    if [ "${commit_message:: ${#pr_commit_message_start}}"$'\n' == "$pr_commit_message_start"$'\n' ]; then
      log "Not processing this commit because its commit message starts with: $pr_commit_message_start"
      exit 0
    fi
  fi

  check_repository \
    "$cratesio_api" \
    "$cratesio_crates_owner" \
    "$gh_api" \
    "$this_ref" \
    "$repo_owner" \
    "$repo" \
    "${check_for_crate_compliance:-}" \
    "${is_pr_branch:-}"

  local subpub_args=(publish --root "$root")

  local crates_to_publish=()

  while IFS= read -r crate; do
    if [ ! "$crate" ]; then
      continue
    fi
    if [[ "$crate" =~ [^[:space:]]+ ]]; then
      crates_to_publish+=("${BASH_REMATCH[0]}")
    else
      die "Crate name had unexpected format: $crate"
    fi
  done < <(echo "$spub_publish_only")

  if [ ${#crates_to_publish[*]} -eq 0 ]; then
    if [ "$spub_publish_all" ] || [ ! "${is_pr_branch:-}" ]; then
      load_publishable_workspace_crates
      crates_to_publish=("${publishable_workspace_crates[@]}")
    elif [ "${changed_pr_files:-}" ]; then
      for file in "${changed_pr_files[@]}"; do
        local current="$file"
        while true; do
          current="$(dirname "$current")"
          if [ "$current" == . ]; then
            break
          fi

          local manifest_path="$root/$current/Cargo.toml"
          if [ -e "$manifest_path" ]; then
            setup_yj

            local manifest_json
            manifest_json="$("$yj" -tj < "$manifest_path")"

            local publish
            publish="$(echo -n "$manifest_json" | jq -r '.package.publish')"
            case "$publish" in
              null|true)
                local crate
                crate="$(echo -n "$manifest_json" | jq -e -r '.package.name')"

                local crate_already_inserted
                for prev_crate_to_check in "${crates_to_publish[@]}"; do
                  if [ "$prev_crate_to_check" == "$crate"  ]; then
                    crate_already_inserted=true
                    break
                  fi
                done

                if [ "${crate_already_inserted:-}" ]; then
                  unset crate_already_inserted
                else
                  crates_to_publish+=("$crate")
                  subpub_args+=(--verify-only "$crate")
                fi
              ;;
              false) ;;
              *)
                die "Unexpected value for .package.publish of $manifest_path: $publish"
              ;;
            esac

            break
          fi
        done
      done
    fi

    if [ ${#crates_to_publish[*]} -eq 0 ]; then
      if [ "${is_pr_branch:-}" ]; then
        log "No crate changes were detected for this PR, therefore no crates will be published"
        exit
      else
        die "No crates to publish"
      fi
    fi
  fi

  if [ "${publish_dependencies_locally:-}" ]; then
    local substrate_git_url="https://github.com/$repo_owner/substrate"
    local substrate_git_source_prefix="git+$substrate_git_url"
    local spub_substrate_publish_args=()
    local substrate_crates_to_publish=()
    local substrate_source_to_publish

    local workspace_metadata
    workspace_metadata="$(cargo metadata --quiet --format-version=1 --all-features)"

    for crate in "${crates_to_publish[@]}"; do
      case "$repo" in
        substrate) ;;
        polkadot)
          while IFS= read -r line; do
            if ! [[ "$line" =~ ^([^[:space:]]+)[[:space:]]+([^[:space:]]+) ]]; then
              die "cargo-metadata line output had unexpected format: $line"
            fi

            local dep="${BASH_REMATCH[1]}"
            local source="${BASH_REMATCH[2]}"

            case "$source" in
              registry+*)
                # crates.io dependency
              ;;
              null)
                # workspace dependency
              ;;
              "$substrate_git_source_prefix?"*)
                # Substrate git dependency

                local crate_already_inserted
                for substrate_crate in "${substrate_crates_to_publish[@]}"; do
                  if [ "$substrate_crate" == "$dep" ]; then
                    crate_already_inserted=true
                    break
                  fi
                done

                if [ "${crate_already_inserted:-}" ]; then
                  unset crate_already_inserted
                else
                  substrate_crates_to_publish+=("$dep")
                  spub_substrate_publish_args+=(
                    --publish-only "$dep"
                    --crate-debug-description "$dep=This crate was detected as a dependency of Polkadot crate $crate, hence why it's being listed for publishing"
                  )
                fi
              ;;
              *)
                die "Unsupported source from metadata for dependency $dep of crate $crate: $source"
              ;;
            esac
          done < <(
            (
              echo "$workspace_metadata" | jq --arg crate "$crate" -r '
                . as $in |
                paths | select(
                  (. | length == 2) and # .package, [N]
                  .[0] == "packages" and
                  # .source == null for workspace crates
                  (. as $path | $in | getpath($path + ["source"])==null) and
                  (. as $path | $in | getpath($path + ["name"])==$crate)
                ) as $crate_path |
                $in | getpath($crate_path) |
                .dependencies[] |
                select(.kind != "dev") |
                "\(.name) \(.source)"
              '
            ) || die all "Failed to parse cargo metadata for crate $crate"
          )

          while IFS= read -r line; do
            if ! [[
              "$line" =~ ^├──[[:space:]]+([^[:space:]]+)[[:space:]]+[^[:space:]]+[[:space:]]+\(([^\(]+)\)
            ]]; then
              continue
            fi

            local dep="${BASH_REMATCH[1]}"
            local source="${BASH_REMATCH[2]}"

            case "$source" in
              "*"|proc-macro)
                # crates.io dependency or proc-macros
              ;;
              "$root"|"$root"/*)
                # workspace dependency
              ;;
              "$substrate_git_url?"*)
                # Substrate git dependency
                case "${substrate_source_to_publish:-}" in
                  "")
                    substrate_source_to_publish="$source"
                  ;;
                  "$source") ;;
                  *)
                    local error="Two different Substrate sources are used in the dependencies of $crate:"
                    error+=$'\n'"$source"
                    error+=$'\n'"$substrate_source_to_publish"
                    die "$error"
                  ;;
                esac
              ;;
              *)
                die "Unsupported source for dependency $dep of crate $crate: $source"
              ;;
            esac
          done < <(
            cargo tree \
              --quiet \
              -e normal,build \
              --all-features \
              -p "$crate" \
            || die all "Failed to run cargo tree for crate $crate"
          )
        ;;
        *)
          die "Repository is not supported: $repo"
        ;;
      esac
    done

    if [ "${substrate_source_to_publish:-}" ]; then
      local substrate_commit
      if [[ "$substrate_source_to_publish" =~ \#(.*)$ ]]; then
        substrate_commit="${BASH_REMATCH[1]}"
      else
        die "Failed to parse Substrate commit from $substrate_source_to_publish"
      fi

      >/dev/null pushd "$tmp"
      curl -sSLf \
        -o substrate.zip \
        "$substrate_git_url/archive/$substrate_commit.zip"
      unzip -qq substrate.zip
      rm substrate.zip
      mv substrate-"$substrate_commit"* substrate
      >/dev/null popd

      >/dev/null pushd "$tmp/substrate"
      git -c init.defaultBranch=master init -q
      git add .
      git commit -qm 'initialize'
      >/dev/null popd

      load_workspace_crates
      local root_workspace_crates=("${workspace_crates[@]}")
      load_workspace_crates "$tmp/substrate/Cargo.toml"
      setup_local_cratesio_target "${root_workspace_crates[*]} ${workspace_crates[*]}"
      prevent_target_setup=true
      workspace_crates=("${root_workspace_crates[@]}")
      unset root_workspace_crates

      setup_subpub "$spub_branch"
      setup_local_cargo_config "$initial_commit_sha" on
      subpub publish \
        --root "$tmp/substrate" \
        --verify-none \
        "${spub_substrate_publish_args[@]}"
      setup_local_cargo_config "$initial_commit_sha" off

      while IFS= read -r published_crate_name_and_version; do
        subpub_args+=(
          --set-dependency-version "$published_crate_name_and_version"
        )
      done < "$published_crates_log"

      rm -rf substrate
    fi
  fi

  local should_submit_pr use_clean_environment
  case "$cratesio_target_instance" in
    local)
      if [ ! "${is_pr_branch:-}" ]; then
        subpub_args+=(--post-check)
      fi
      if [ ! "${prevent_target_setup:-}" ]; then
        setup_local_cratesio_target
      fi
    ;;
    default)
      if [ ! "$github_token" ]; then
        die "\$github_token is empty"
      fi

      if [ "$cratesio_token" ]; then
        export CARGO_REGISTRY_TOKEN="$cratesio_token"
      else
        die "\$cratesio_token is empty"
      fi

      export SPUB_CRATES_API=http://crates.io/api/v1
      subpub_args+=(
        --index-url "https://raw.githubusercontent.com/rust-lang/crates.io-index"
        --index-repository "https://github.com/rust-lang/crates.io-index"
        --after-publish-delay 64
      )

      should_submit_pr=true
      use_clean_environment=true
    ;;
    *)
      die "Invalid \$cratesio_target_instance: $cratesio_target_instance"
    ;;
  esac

  if [ "${should_submit_pr:-}" ]; then
    subpub_args+=(--for-pull-request)
  fi

  for crate_to_publish in "${crates_to_publish[@]}"; do
    subpub_args+=(--publish-only "$crate_to_publish")
  done

  if [ "$spub_start_from" ]; then
    subpub_args+=(--start-from "$spub_start_from")
  fi

  if [ "$spub_verify_from" ]; then
    subpub_args+=(--verify-from "$spub_verify_from")
  fi

  while IFS= read -r crate; do
    if [ ! "$crate" ]; then
      continue
    fi
    if [[ "$crate" =~ [^[:space:]]+ ]]; then
      subpub_args+=(-e "${BASH_REMATCH[0]}")
    else
      die "Crate name had unexpected format: $crate"
    fi
  done < <(echo "$spub_exclude")

  if [ "${SPUB_TMP:-}" ]; then
    if [ "${SPUB_TMP:: 1}" != '/' ]; then
      export SPUB_TMP="$PWD/$SPUB_TMP"
    fi
    rm -rf "$SPUB_TMP"
    mkdir -p "$SPUB_TMP"
  fi

  setup_subpub "$spub_branch"

  if [ "${use_clean_environment:-}" ]; then
    export CARGO_TARGET_DIR="$tmp/target"
    mkdir -p "$CARGO_TARGET_DIR"
    export CARGO_HOME="$tmp/cargo"
    mkdir -p "$CARGO_HOME"

    subpub_args+=(
      # Clearing $CARGO_HOME is needed to force cargo to redownload the
      # crates.io index after crates are published. We do this because cargo
      # doesn't properly update the registry incrementally, so we end up not
      # finding the crates which were recently published.
      # TODO: doing this introduces a lot of delay since the crates.io index has
      # to be redownloaded after each crate is published. We should find a
      # sensible workaround which isn't about nuking the registry cache.
      --clear-cargo-home "$CARGO_HOME"
    )
  fi

  if [ "${spub_stop_at_step:-}" ]; then
    subpub_args+=(--stop-at-step "$spub_stop_at_step")
  fi

  case "$repo" in
    substrate) ;;
    polkadot)
      subpub_args+=(
        # it's necessary to clean up the wbuild folder in order to free up disk
        # space; see https://github.com/paritytech/ci_cd/issues/726
        --post-publish-cleanup-glob "${CARGO_TARGET_DIR:-$root/target}/**/wbuild"
      )
    ;;
    *)
      die "Repository is not supported: $repo"
    ;;
  esac

  if [ "${should_setup_local_cargo_config:-}" ]; then
    setup_local_cargo_config "$initial_commit_sha" on
  fi

  local subpub_exit_code=0
  subpub "${subpub_args[@]}" || subpub_exit_code=$?

  if [ "${should_setup_local_cargo_config:-}" ]; then
    setup_local_cargo_config "$initial_commit_sha" off
  fi

  local diff
  diff="$(git diff "$initial_commit_sha")"

  if [ "$subpub_exit_code" -ne 0 ] && [ "${SPUB_TMP:-}" ]; then
    mkdir -p "$SPUB_TMP"
    echo "$diff" > "$SPUB_TMP/after-publish.diff"
  fi

  if [ "${should_submit_pr:-}" ] && [ ${#diff} -gt 0 ] && [ "$subpub_exit_code" -eq 0 ]; then
    git reset -q "$initial_commit_sha"
    git add .
    git commit -q -m "$pr_commit_message_start" -m "generated from $ci_job_url"

    local target_branch="ci-crates-publishing-update"
    if git rev-parse --verify "$target_branch" >/dev/null; then
      git branch -D "$target_branch"
    fi
    git checkout -b "$target_branch"

    local target_remote="https://token:$github_token@github.com/$repo_owner/$repo.git"
    if git remote get-url target >/dev/null; then
      git remote set-url target "$target_remote"
    else
      git remote add target "$target_remote"
    fi
    git push --force target "$target_branch"
    git remote remove target

    local target_branch_filter
    target_branch_filter="$(echo -n "$repo_owner:$target_branch" | jq -sRr @uri)"
    local open_pr_count
    open_pr_count="$(curl -sSLf \
      -H "Authorization: token $github_token" \
      "$gh_api/repos/$repo_owner/$repo/pulls?state=open&head=$target_branch_filter" |
      jq -e -r '. | length'
    )"

    if [ "$open_pr_count" -eq 0 ]; then
      local title="[AUTOMATED] Update crate versions after publish"
      local body="
# :exclamation: DO NOT push commits to this PR! This PR was created automatically through CI

This PR includes crate version updates after they were published to crates.io by the publishing automation.

After the publishing works on \`master\` this PR's branch will automatically be **forced pushed to** with crate version updates on top of the latest \`master\` commit. **You should not push commits to this PR** since they would be overwritten by the force push. If you need to fix anything, instead branch off this PR's branch and create a new PR.

Note: it's normal for crate versions to increase past a single version in the diff because a crate might be republished from \`master\` *multiple times* before this PR is merged. Visit \`https://crates.io/crates/\$CRATE/versions\` if you want to see for yourself that all the versions in-between were indeed published.

For additional context see https://github.com/paritytech/releng-scripts/wiki/Crates-publishing-automation#toc.
"
      local payload
      payload="$(jq -n \
        --arg title "$title" \
        --arg body "$body" \
        --arg base "$this_ref" \
        --arg head "$target_branch" \
        '{
            title: $title,
            body: $body,
            head: $head,
            base: $base
        }'
      )"
      curl -sSLf \
        -H "Authorization: token $github_token" \
        -X POST \
        -d "$payload" \
        "$gh_api/repos/$repo_owner/$repo/pulls"
    fi
  fi

  exit "$subpub_exit_code"
}

main "$@"
